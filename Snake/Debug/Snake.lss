
AVRASM ver. 2.2.7  X:\tsiu51\projekt\Snake\main.asm Wed Mar 15 16:11:13 2023

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m328Pdef.inc'
X:\tsiu51\projekt\Snake\main.asm(56): Including file 'X:\tsiu51\projekt\Snake\help.inc'
X:\tsiu51\projekt\Snake\main.asm(57): Including file 'X:\tsiu51\projekt\Snake\init.inc'
X:\tsiu51\projekt\Snake\main.asm(58): Including file 'X:\tsiu51\projekt\Snake\vmem.inc'
X:\tsiu51\projekt\Snake\main.asm(59): Including file 'X:\tsiu51\projekt\Snake\mux.inc'
X:\tsiu51\projekt\Snake\main.asm(60): Including file 'X:\tsiu51\projekt\Snake\joystick.inc'
X:\tsiu51\projekt\Snake\main.asm(61): Including file 'X:\tsiu51\projekt\Snake\move.inc'
X:\tsiu51\projekt\Snake\main.asm(62): Including file 'X:\tsiu51\projekt\Snake\screen.inc'
X:\tsiu51\projekt\Snake\main.asm(63): Including file 'X:\tsiu51\projekt\Snake\hits.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m328Pdef.inc'
X:\tsiu51\projekt\Snake\main.asm(56): Including file 'X:\tsiu51\projekt\Snake\help.inc'
X:\tsiu51\projekt\Snake\main.asm(57): Including file 'X:\tsiu51\projekt\Snake\init.inc'
X:\tsiu51\projekt\Snake\main.asm(58): Including file 'X:\tsiu51\projekt\Snake\vmem.inc'
X:\tsiu51\projekt\Snake\main.asm(59): Including file 'X:\tsiu51\projekt\Snake\mux.inc'
X:\tsiu51\projekt\Snake\main.asm(60): Including file 'X:\tsiu51\projekt\Snake\joystick.inc'
X:\tsiu51\projekt\Snake\main.asm(61): Including file 'X:\tsiu51\projekt\Snake\move.inc'
X:\tsiu51\projekt\Snake\main.asm(62): Including file 'X:\tsiu51\projekt\Snake\screen.inc'
X:\tsiu51\projekt\Snake\main.asm(63): Including file 'X:\tsiu51\projekt\Snake\hits.inc'
                                 
                                 ; SPI pins
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 .equ    MOSI = PB3
                                 .equ    SCK  = PB5
                                 .equ    SS   = PB2
                                 ; LED colors
                                 .equ    B = 0
                                 .equ    G = 1
                                 .equ    R = 2
                                 .equ    A = 3
                                 ; Game constants
                                 .equ    SPEED = 100 ; lower is faster
                                 .equ    P1_COLOR = R
                                 .equ    P2_COLOR = B
                                 .equ    FRUIT_COLOR = G
                                 .equ    MAX_LEN = 64
                                 .equ    P1_WINS = 1
                                 .equ    P2_WINS = 2
                                 .equ    TIED    = 3
                                 ; Controls
                                 .equ    JOY_1 = 2
                                 .equ    JOY_2 = 0
                                 .equ    RIGHT = 0
                                 .equ    UP    = 1
                                 .equ    LEFT  = 2
                                 .equ    DOWN  = 3
                                 ; Registers
                                 .def    ZERO = r2
                                 
                                 
                                 .dseg ; SRAM
000100                               VMEM:   .byte 128
000180                               LINE:   .byte 1
                                 
000181                               P1:     .byte MAX_LEN ; $xy
0001c1                               P1_LEN: .byte 1
0001c2                               P1_DIR: .byte 1 ; $0b0000_dlur
                                 
0001c3                               P2:     .byte MAX_LEN ; $xy
000203                               P2_LEN: .byte 1
000204                               P2_DIR: .byte 1 ; $0b0000_dlur
                                 
000205                               FRUIT:  .byte 1     ; $xy
000206                               SEED:   .byte 1 ; for random
                                 
000207                               STATUS: .byte 1
                                 .cseg
                                 
                                 
                                 .org 0x0000
000000 940c 028f                     jmp     PROG_START
                                 .org OVF0ADDR
000020 940c 0107                     jmp     MULTIPLEX
                                 
                                 
                                 ; Includes
                                 .include "help.inc"
                                 
                                 ; Initiates player positions
                                     ; player 1
000022 e8e1                          ldi		ZL,LOW(P1)
000023 e0f1                      	ldi		ZH,HIGH(P1)
                                     ; head
000024 e408                      	ldi		r16,$48
000025 8300                      	st		Z,r16
                                     ; body
000026 e308                      	ldi		r16,$38
000027 8301                      	std		Z+1,r16
000028 e208                      	ldi		r16,$28
000029 8302                      	std		Z+2,r16
00002a e108                          ldi		r16,$18
00002b 8303                      	std		Z+3,r16
00002c e008                          ldi		r16,$08
00002d 8304                      	std		Z+4,r16
                                     ; length
00002e e005                      	ldi		r16,5
00002f 9300 01c1                 	sts		P1_LEN,r16
                                     ; direction
000031 2700                          clr     r16
000032 6001                          sbr     r16,(1 << RIGHT)
000033 9300 01c2                     sts     P1_DIR,r16
                                 
                                     ; player 2
000035 ece3                          ldi		ZL,LOW(P2)
000036 e0f1                      	ldi		ZH,HIGH(P2)
                                     ; head
000037 eb07                      	ldi		r16,$b7
000038 8300                      	st		Z,r16
                                     ; body
000039 ec07                      	ldi		r16,$c7
00003a 8301                      	std		Z+1,r16
00003b ed07                      	ldi		r16,$d7
00003c 8302                      	std		Z+2,r16
00003d ee07                      	ldi		r16,$e7
00003e 8303                      	std		Z+3,r16
00003f ef07                      	ldi		r16,$f7
000040 8304                      	std		Z+4,r16
                                     ; length
000041 e005                      	ldi		r16,5
000042 9300 0203                 	sts		P2_LEN,r16
                                     ; direction
000044 2700                          clr     r16
000045 6004                          sbr     r16,(1 << LEFT)
000046 9300 0204                     sts     P2_DIR,r16
                                 
                                     ; clear and place
000048 9478                          sei     ; interrupt enabled
000049 940e 007a                     call    PLACE_FRUIT
00004b 9508                          ret
                                     
                                  
                                  COORD2BYTE:
                                 ; Converts coordinate in r16
                                 ; to byte for DAMatrix in r19
                                 
00004c e830                          ldi     r19,0b1000_0000
00004d 3000                          cpi     r16,0
00004e f019                          breq    c2b_done
                                 c2b_loop:    
00004f 9536                          lsr     r19
000050 950a                          dec     r16    
000051 f7e9                          brne    c2b_loop
                                 c2b_done:
000052 9508                          ret
                                 
                                 
                                 SPI_TX:
                                 ; Sends argument register on stack,
                                 ; waiting until send is complete
                                 ; by checking flag in SPSR
                                 
000053 93ff                          push    ZH
000054 93ef                          push    ZL
000055 930f                          push    r16
                                 
000056 b7fe                          in      ZH,SPH
000057 b7ed                          in      ZL,SPL
000058 8106                          ldd     r16,Z+6
000059 bd0e                          out     SPDR,r16
                                 
                                 spi_tx_wait:
00005a b50d                          in      r16,SPSR
00005b ff07                          sbrs    r16,SPIF
00005c cffd                          rjmp    spi_tx_wait
                                 
00005d 910f                          pop     r16
00005e 91ef                          pop     ZL
00005f 91ff                          pop     ZH
000060 9508                          ret
                                 
                                 
                                 DELAY:
000061 e604                          ldi     r16,SPEED
                                 delay0:
000062 e210                          ldi     r17,32
                                 delay1:
000063 e220                          ldi     r18,32
                                 delay2:
000064 952a                          dec     r18
000065 f7f1                          brne    delay2
000066 951a                          dec     r17
000067 f7d9                          brne    delay1
000068 950a                          dec     r16
000069 f7c1                          brne    delay0
00006a 9508                          ret
                                 
                                 WAIT:
00006b 930f                          push    r16
00006c 940e 0061                     call    DELAY
00006e 910f                          pop     r16
00006f 950a                          dec     r16
000070 f7d1                          brne    WAIT
000071 9508                          ret
                                 
                                 
                                 SEP_XY:
                                 ; In:  r16 = 0bxxxx_yyyy.
                                 ; Out: r16 = 0b0000_xxxx,
                                 ;      r17 = 0b0000_yyyy.
000072 2f10                          mov     r17,r16
000073 9502                          swap    r16
000074 700f                          andi    r16,0b0000_1111 ; x
000075 701f                          andi    r17,0b0000_1111 ; y
000076 9508                          ret
                                 
                                 
                                 JOIN_XY:
                                 ; In:  r16 = 0b0000_xxxx.
                                 ;      r17 = 0b0000_yyyy,
                                 ; Out: r16 = 0bxxxx_yyyy.
000077 9502                          swap    r16
000078 2b01                          or      r16,r17
000079 9508                          ret
                                 
                                 
                                 PLACE_FRUIT:
                                 RE_TRY:    
00007a 9100 0206                     lds     r16,SEED
00007c e0f1                          ldi     ZH,HIGH(P1)
00007d e8e1                          ldi     ZL,LOW(P1)
00007e 9110 01c1                     lds     r17,P1_LEN
                                     
                                     RANDOM_LOOP1:
000080 9121                          ld      r18,Z+
000081 1720                          cp      r18,r16
000082 f3b9                          breq    RE_TRY   
000083 951a                          dec     r17
000084 f7d9                          brne    RANDOM_LOOP1
                                 
000085 e0f1                          ldi     ZH,HIGH(P2)
000086 ece3                          ldi     ZL,LOW(P2)
000087 9110 0203                     lds     r17,P2_LEN
                                 
                                     RANDOM_LOOP2:
000089 9121                          ld      r18,Z+
00008a 1720                          cp      r18,r16
00008b f371                          breq    RE_TRY   
00008c 951a                          dec     r17
00008d f7d9                          brne    RANDOM_LOOP2
                                 
00008e 9300 0205                     sts     FRUIT,r16
                                 .include "init.inc"
000090 9508                      
                                 ; Entry point for call from main
                                 spi_init:
                                     ; Set MOSI and SCK output, all others input
000091 e20c                          ldi     r16,( 1 << MOSI | 1 << SCK | 1 << SS )
000092 b904                          out     DDRB,r16
                                 
                                     ; Enable SPI, Master, set clock rate fck/16
                                     ldi     r16,( 1 << SPE  | 1 << MSTR |\
000093 e500                                        0 << SPR0 | 0 << SPR1 )
000094 bd0c                          out     SPCR,r16
                                 
000095 e010                          ldi     r17,( 0 << SPI2X )
000096 bd1d                          out     SPSR,r17
                                 
                                 adc_init:
                                     ; ADC Control and Status Register A:
                                     ; ADEN, ADSC, ADATE, ADIF, ADIE, ADPS2..0
                                     ; Prescaler 2..0: Set to 1/128 => 125 kHz
000097 e807                          ldi     r16,0b1000_0111
000098 9300 007a                     sts     ADCSRA,r16
                                 
                                     ; ADC Multiplexer Selection Register:
                                     ; REFS1..0, ADLAR, --, MUX3..0
                                     ; Ref set to AVCC (01)
                                     ; Channel Selection 3..0: 0000 = ADC0
00009a e600                          ldi     r16,0b0110_0000
00009b 9300 007c                     sts     ADMUX,r16
                                 
                                 interrupt_init:
                                     ldi     r16,( 0 << COM0A1 | 0 << COM0A0 |\
00009d e000                                        0 << WGM01  | 0 << WGM00  )
00009e bd04                          out     TCCR0A,r16
                                 
                                     ldi     r16,( 0 << WGM02 | 0 << CS02 |\
00009f e003                                        1 << CS01  | 1 << CS00 )
0000a0 bd05                          out     TCCR0B,r16
                                     
0000a1 e001                          ldi     r16,( 1 << TOIE0 )
0000a2 9300 006e                     sts     TIMSK0,r16
                                 
                                 data_init:
0000a4 e8e1                          ldi     ZL,LOW(P1)
0000a5 e0f1                          ldi     ZH,HIGH(P1)
0000a6 e400                          ldi     r16,MAX_LEN
                                 clear_p1_loop:
0000a7 9221                          st      Z+,ZERO 
0000a8 950a                          dec     r16
0000a9 f7e9                          brne    clear_p1_loop
0000aa 9220 01c1                     sts     P1_LEN,ZERO
                                     
0000ac ece3                          ldi     ZL,LOW(P2)
0000ad e0f1                          ldi     ZH,HIGH(P2)
0000ae e400                          ldi     r16,MAX_LEN
                                 clear_p2_loop:
0000af 9221                          st      Z+,ZERO
0000b0 950a                          dec     r16
0000b1 f7e9                          brne    clear_p2_loop
0000b2 9220 0203                     sts     P2_LEN,ZERO
                                 
0000b4 e0e5                          ldi     ZL,LOW(FRUIT)
0000b5 e0f2                          ldi     ZH,HIGH(FRUIT)
0000b6 8220                          st      Z,ZERO
                                 
0000b7 9220 0180                     sts     LINE,ZERO
0000b9 9220 0207                     sts     STATUS,ZERO
                                 
0000bb 9508                      ret ; from INIT
                                 .include "vmem.inc"
                                 
0000bc 93ff                          push    ZH
0000bd 93ef                          push    ZL
0000be e0f1                          ldi     ZH,HIGH(VMEM)
0000bf e0e0                          ldi     ZL,LOW(VMEM)
0000c0 e800                          ldi     r16,128
                                 clear_byte:
0000c1 9221                          st      Z+,ZERO
0000c2 950a                          dec     r16
0000c3 f7e9                          brne    clear_byte
0000c4 91ef                          pop     ZL
0000c5 91ff                          pop     ZH
0000c6 9508                          ret
                                 
                                 
                                 UPDATE_VMEM:
0000c7 93ff                          push    ZH
0000c8 93ef                          push    ZL
0000c9 93df                          push    YH
0000ca 93cf                          push    YL
                                 update_p1:
0000cb e0f1                          ldi     ZH,HIGH(P1)
0000cc e8e1                          ldi     ZL,LOW(P1)
0000cd 9140 01c1                     lds     r20,P1_LEN
                                 update_p1_loop:
0000cf 9101                          ld      r16,Z+
                                     ; sets Y to correct line in VMEM
                                     ; returns DAMatrix byte in r19
0000d0 940e 00f0                     call    POINT_AT_LINE
                                     ; adds player color at coord to that byte
0000d2 810a                          ldd     r16,Y+P1_COLOR
0000d3 2b30                          or      r19,r16
0000d4 833a                          std     Y+P1_COLOR,r19
0000d5 954a                          dec     r20
0000d6 f7c1                          brne    update_p1_loop
                                 
                                 
                                 update_p2:  ; same as p1
0000d7 e0f1                          ldi     ZH,HIGH(P2)
0000d8 ece3                          ldi     ZL,LOW(P2)
0000d9 9140 0203                     lds     r20,P2_LEN
                                 update_p2_loop:
0000db 9101                          ld      r16,Z+
0000dc 940e 00f0                     call    POINT_AT_LINE
0000de 8108                          ldd     r16,Y+P2_COLOR
0000df 2b30                          or      r19,r16
0000e0 8338                          std     Y+P2_COLOR,r19
0000e1 954a                          dec     r20
0000e2 f7c1                          brne    update_p2_loop
                                 
                                 update_fruit:
0000e3 e0f2                          ldi     ZH,HIGH(FRUIT)
0000e4 e0e5                          ldi     ZL,LOW(FRUIT)
0000e5 8100                          ld      r16,Z
0000e6 940e 00f0                     call    POINT_AT_LINE
0000e8 8109                          ldd     r16,Y+FRUIT_COLOR
0000e9 2b30                          or      r19,r16
0000ea 8339                          std     Y+FRUIT_COLOR,r19
                                 
                                 update_done:
0000eb 91cf                          pop     YL
0000ec 91df                          pop     YH
0000ed 91ef                          pop     ZL
0000ee 91ff                          pop     ZH
0000ef 9508                          ret
                                 
                                 
                                 POINT_AT_LINE:
                                 ; Sets Y to line with r16=x,y in VMEM.
                                 ; Returns byte to write in r19
0000f0 e0d1                          ldi     YH,HIGH(VMEM)
0000f1 e0c0                          ldi     YL,LOW(VMEM)
0000f2 940e 0072                     call    SEP_XY ; x,y = r16,r17
                                     ; determine if upper display
0000f4 3018                          cpi     r17,8
0000f5 f020                          brlo    upper_lower_chosen
                                     ; move Y to upper display
0000f6 5018                          subi    r17,8
0000f7 e420                          ldi     r18,64
0000f8 0fc2                          add     YL,r18
0000f9 1dd2                          adc     YH,ZERO
                                 upper_lower_chosen:
                                     ; Y += y * 4 to point at line
0000fa 0f11                          lsl     r17
0000fb 0f11                          lsl     r17
0000fc 0fc1                          add     YL,r17
0000fd 1dd2                          adc     YH,ZERO
                                     ; determine if right display
0000fe 3008                          cpi     r16,8
0000ff f020                          brlo    left_right_chosen
                                     ; move Y to right display
000100 5008                          subi    r16,8
000101 e220                          ldi     r18,32
000102 0fc2                          add     YL,r18
000103 1dd2                          adc     YH,ZERO
                                 left_right_chosen:
                                     ; convert x to byte for DAMatrix
000104 940e 004c                     call    COORD2BYTE ; in r16, out r19
                                 .include "mux.inc"
000106 9508                      
                                 ; Multiplexes DAMatrix.
                                 ; Draws LINE on each display 3..0.
000107 93ff                          push    ZH
000108 93ef                          push    ZL
000109 930f                          push    r16
00010a 931f                          push    r17
00010b 932f                          push    r18
00010c 933f                          push    r19
                                 
00010d b70f                          in      r16,SREG
00010e 930f                          push    r16 
                                 
00010f e0e0                          ldi     ZL,LOW(VMEM)
000110 e0f1                          ldi     ZH,HIGH(VMEM)
                                 
                                     ; sets Z to start of display 3
000111 e610                          ldi     r17,96
000112 0fe1                          add     ZL,r17
000113 1df2                          adc     ZH,ZERO
                                 
                                     ; resets LINE to 0 if 8
000114 9100 0180                     lds     r16,LINE
000116 7007                          andi    r16,7
000117 2f10                          mov     r17,r16
                                 
                                     ; LINE * 4 to get row in VMEM,
                                     ; sets Z to that row
000118 0f11                          lsl     r17
000119 0f11                          lsl     r17
00011a 0fe1                          add     ZL,r17
00011b 1df2                          adc     ZH,ZERO
                                 
00011c 940e 004c                     call    COORD2BYTE ; in r16, out r19
                                 
00011e 982a                          cbi     PORTB,SS ; pulls latch
                                 
                                     ; loops through displays
00011f e024                          ldi     r18,4
                                 disp_loop:
                                     ; transmits blue
000120 8100                          ldd     r16,Z+B 
000121 930f                          push    r16
000122 940e 0053                     call    SPI_TX
000124 910f                          pop     r16
                                 
                                     ; transmits green
000125 8101                          ldd     r16,Z+G
000126 930f                          push    r16
000127 940e 0053                     call    SPI_TX
000129 910f                          pop     r16
                                 
                                     ; transmits red
00012a 8102                          ldd     r16,Z+R
00012b 930f                          push    r16
00012c 940e 0053                     call    SPI_TX
00012e 910f                          pop     r16
                                     
                                     ; transmits anode
00012f 9530                          com     r19 ; invert bytes for DAMatrix
000130 933f                          push    r19
000131 940e 0053                     call    SPI_TX
000133 913f                          pop     r19
000134 9530                          com     r19
                                 
                                     ; moves Z to next display
000135 e210                          ldi     r17,32
000136 1be1                          sub     ZL,r17
000137 09f2                          sbc     ZH,ZERO
                                 
000138 952a                          dec     r18
000139 f731                          brne    disp_loop
                                 
00013a 9a2a                          sbi     PORTB,SS ; pulls latch
                                 
                                     ; incs LINE before next INT
00013b 9100 0180                     lds     r16,LINE
00013d 9503                          inc     r16
00013e 9300 0180                     sts     LINE,r16
                                 
                                     ; Upcount random
000140 9100 0206                     lds     r16,SEED
000142 9503                          inc     r16
000143 9300 0206                     sts     SEED,r16
                                 
000145 910f                          pop     r16
000146 bf0f                          out     SREG,r16
                                 
000147 913f                          pop     r19
000148 912f                          pop     r18
000149 911f                          pop     r17
00014a 910f                          pop     r16
00014b 91ef                          pop     ZL
00014c 91ff                          pop     ZH
                                 .include "joystick.inc"
00014d 9518                      
00014e e022                          ldi     r18,JOY_1
00014f 9100 01c2                     lds     r16,P1_DIR
000151 940e 015d                     call    UPDATE_DIR
000153 9300 01c2                     sts     P1_DIR,r16
                                     
000155 e020                          ldi     r18,JOY_2
000156 9100 0204                     lds     r16,P2_DIR
000158 940e 015d                     call    UPDATE_DIR
00015a 9300 0204                     sts     P2_DIR,r16
00015c 9508                          ret
                                 
                                 
                                 UPDATE_DIR:
                                 ; Performs ADC conversion and
                                 ; updates direction in SRAM
00015d 930f                          push    r16 ; store dir
00015e 2711                          clr     r17 ; temporary direction
                                     ; x-direction
00015f 940e 0180                     call    READ_JOY ; returns ADCH in r19
000161 3c30                          cpi     r19,192 ; checks right
000162 f010                          brlo    not_right
000163 6011                          sbr     r17,(1 << RIGHT)
000164 c00e                          rjmp    all_done ; not_left if diagonal
                                 not_right:
000165 3430                          cpi     r19,64 ; checks left
000166 f410                          brsh    not_left
000167 6014                          sbr     r17,(1 << LEFT)
000168 c00a                          rjmp    all_done ; not left if diagonal
                                 not_left:
                                     ; y-direction
000169 9523                          inc     r18 ; change to y-channel
00016a 940e 0180                     call    READ_JOY ; returns ADCH in r19
00016c 3c30                          cpi     r19,192 ; checks up
00016d f010                          brlo    not_up
00016e 6012                          sbr     r17,(1 << UP)
00016f c003                          rjmp    all_done
                                 not_up:
000170 3430                          cpi     r19,64 ; checks down
000171 f408                          brsh    all_done
000172 6018                          sbr     r17,(1 << DOWN)
                                 all_done:
000173 910f                          pop     r16 ; restore dir
                                 	
000174 2f20                      	mov		r18,r16
000175 2b21                      	or		r18,r17
000176 702f                      	andi	r18,$0f ; needed?
                                 	
                                 	// Using dir compare to check if not allowed change in direction
                                 			
000177 302f                      	cpi		r18,$0f				// Check diagonal
000178 f031                      	breq	NOT_ALLOWED_DIR
                                 	
000179 302a                      	cpi		r18,$0A
00017a f021                      	breq	NOT_ALLOWED_DIR		// Check Y-axis
                                 	
00017b 3025                      	cpi		r18,$05
00017c f011                      	breq	NOT_ALLOWED_DIR		// Check X-axis
                                 
00017d 1112                          cpse    r17,ZERO
00017e 2f01                          mov     r16,r17   // Skip this is joystick not touched
                                 NOT_ALLOWED_DIR:
00017f 9508                          ret
                                 
                                 
                                 READ_JOY:
                                 ; Reads from pin specified by MUX3..0 in r18
                                 ; Returns ADCH in r19    
000180 e600                          ldi     r16,0b0110_0000 ; load default ADMUX
000181 2b02                          or      r16,r18 ; set MUXn = PCn from r18 = n
000182 9300 007c                     sts     ADMUX,r16
000184 9100 007a                     lds     r16,ADCSRA
000186 6400                          ori     r16,0b0100_0000 ; set ADSC
000187 9300 007a                     sts     ADCSRA,r16
                                 adc_not_done: ; wait till conversion done
000189 9100 007a                     lds     r16,ADCSRA
00018b fd06                          sbrc    r16,ADSC
00018c cffc                          rjmp    adc_not_done
                                 adc_done:
00018d 9130 0079                     lds     r19,ADCH ; read 8 MSB
                                 .include "move.inc"
00018f 9508                      
000190 940e 01b2                     call   MOVE_BODYS
000192 9100 0181                     lds    r16,P1
000194 9120 01c2                     lds    r18,P1_DIR
000196 940e 01a3                     call   MOVE_HEAD
000198 9300 0181                     sts    P1,r16
00019a 9100 01c3                     lds    r16,P2
00019c 9120 0204                     lds    r18,P2_DIR
00019e 940e 01a3                     call   MOVE_HEAD
0001a0 9300 01c3                     sts    P2,r16
0001a2 9508                          ret
                                 
                                 
                                 MOVE_HEAD:
0001a3 940e 0072                     call    SEP_XY ; r16 = x, r17 = y
0001a5 fd20                          sbrc    r18,RIGHT
0001a6 9503                          inc     r16
0001a7 fd22                          sbrc    r18,LEFT
0001a8 950a                          dec     r16
0001a9 fd21                          sbrc    r18,UP
0001aa 9513                          inc     r17
0001ab fd23                          sbrc    r18,DOWN
0001ac 951a                          dec     r17
0001ad 940e 01cb                     call    LIMITS
0001af 940e 0077                     call    JOIN_XY
0001b1 9508                          ret
                                 
                                 
                                 MOVE_BODYS:
0001b2 93ff                          push    ZH
0001b3 93ef                          push    ZL
0001b4 e0f1                          ldi     ZH,HIGH(P1)
0001b5 e8e1                          ldi     ZL,LOW(P1)
0001b6 9100 01c1                     lds     r16,P1_LEN
0001b8 940e 01c3                     call    MOVE_BODY
0001ba e0f1                          ldi     ZH,HIGH(P2)
0001bb ece3                          ldi     ZL,LOW(P2)
0001bc 9100 0203                     lds     r16,P2_LEN
0001be 940e 01c3                     call    MOVE_BODY
0001c0 91ef                          pop     ZL
0001c1 91ff                          pop     ZH
0001c2 9508                          ret
                                 
                                 
                                 MOVE_BODY:
                                 ; Makes body follow head.
                                 ; Requires snake length in r16
                                 ; and Z pointing at head.
0001c3 950a                          dec     r16 ; exclude head
0001c4 0fe0                          add     ZL,r16 ; point at tail
0001c5 1df2                          adc     ZH,ZERO
                                 move_body_loop: ; starts at tail
0001c6 9112                          ld      r17,-Z ; save next
0001c7 8311                          std     Z+1,r17 ; store at curr
0001c8 950a                          dec     r16 ; count down
0001c9 f7e1                          brne    move_body_loop
0001ca 9508                          ret
                                 
                                 
                                 LIMITS:
                                 ; Takes x,y = r16,r17 and
                                 ; moves them to other side of
                                 ; screen if outside.
0001cb 3f0f                          cpi     r16,255
0001cc f019                          breq    x_under
0001cd 3100                          cpi     r16,16
0001ce f019                          breq    x_over
0001cf c003                          rjmp    xlim_done
                                 x_under:
0001d0 e00f                          ldi     r16,15
0001d1 c001                          rjmp    xlim_done
                                 x_over:
0001d2 e000                          ldi     r16,0
                                 xlim_done:
0001d3 3f1f                          cpi     r17,255
0001d4 f019                          breq    y_under
0001d5 3110                          cpi     r17,16
0001d6 f019                          breq    y_over
0001d7 c003                          rjmp    ylim_done
                                 y_under:
0001d8 e01f                          ldi     r17,15
0001d9 c001                          rjmp    ylim_done
                                 y_over:
0001da e010                          ldi     r17,0
                                 ylim_done:
0001db 9508                          ret
                                 .include "screen.inc"
                                 
                                 update_win_loop:
0001dc 9105                          lpm     r16,Z+
0001dd 3000                          cpi	    r16,0
0001de f081                          breq    end_of_list
                                     ; sets Y to correct line in VMEM
                                     ; returns DAMatrix byte in r19
0001df 940e 00f0                     call    POINT_AT_LINE
                                     ; adds player color to byte
0001e1 9110 0207                     lds     r17,STATUS
0001e3 3012                          cpi     r17,P2_WINS
0001e4 f031                          breq    first_jmp
0001e5 810a                          ldd     r16,Y+R
0001e6 2b30                          or      r19,r16
0001e7 833a                          std     Y+R,r19
0001e8 3013                          cpi     r17,TIED
0001e9 f009                          breq    first_jmp
0001ea c003                          rjmp    second_jmp
                                 first_jmp:
0001eb 8108                          ldd     r16,Y+B
0001ec 2b30                          or      r19,r16
0001ed 8338                          std     Y+B,r19
                                 SECOND_JMP:
0001ee cfed                          rjmp    update_win_loop
                                 end_of_list:
0001ef 9508                      	ret
                                 
                                 
                                 RED_WIN_TAB: 
0001f0 3736                          .db $36, $37, $38, $39,\
0001f1 3938
0001f2 4a3a                              $3A, $4A, $59, $58,\
0001f3 5859
0001f4 4748
0001f5 5656                              $48, $47, $56, $56 ; R
0001f6 7776                          .db $76, $77, $78, $79,\
0001f7 7978
0001f8 8a7a                              $7A, $8A, $88, $86,\
0001f9 8688
0001fa 989a
0001fb 9696                              $9A, $98, $96, $96 ; E
0001fc b7b6                          .db $B6, $B7, $B8, $B9,\
0001fd b9b8
0001fe c6ba                              $BA, $C6, $CA, $D7,\
0001ff d7ca
000200 d9d8
000201 0000                              $D8, $D9, $00, $00 ; D
                                 BLUE_WIN_TAB:
000202 1716                          .db $16, $17, $18, $19,\
000203 1918
000204 261a                              $1A, $26, $28, $2A,\
000205 2a28
000206 3937                              $37, $39           ; B
000207 5756                          .db $56, $57, $58, $59,\
000208 5958
000209 665a
00020a 7676                              $5A, $66, $76, $76 ; L
00020b 9796                          .db $96, $97, $98, $99,\
00020c 9998
00020d a69a                              $9A, $A6, $B6, $B7,\
00020e b7b6
00020f b9b8
000210 baba                              $B8, $B9, $BA, $BA ; U
000211 d7d6                          .db $D6, $D7, $D8, $D9,\
000212 d9d8
000213 e6da                              $DA, $E6, $E8, $EA,\
000214 eae8
000215 f8f6
000216 00fa                              $F6, $F8, $FA, $00 ; E
                                 TIE_TAB:
000217 463a                          .db $3A, $46, $47, $48,\
000218 4847
000219 4a49
00021a 5a5a                              $49, $4A, $5A, $5A ; T
00021b 7776                          .db $76, $77, $78, $79,\
00021c 7978
00021d 7a7a                              $7A, $7A           ; I
00021e 9796                          .db $96, $97, $98, $99,\
00021f 9998
000220 a69a                              $9A, $A6, $A8, $AA,\
000221 aaa8
000222 b8b6
000223 00ba                              $B6, $B8, $BA, $00 ; E
                                     
                                 .include "hits.inc"
                                 
000224 940e 0229                     call CHECK_PLAYER_HITS
000226 940e 0268                     call CHECK_FRUIT_HITS
000228 9508                          ret
                                 
                                 
                                 CHECK_PLAYER_HITS:
                                     ; p1 head and p2 head
000229 9100 0181                     lds     r16,P1
00022b 9110 01c3                     lds     r17,P2
00022d 1701                          cp      r16,r17
00022e f169                          breq    tie
                                    ; p1 head and p1 body 
00022f e0f1                          ldi     ZH,HIGH(P1)
000230 e8e1                          ldi     ZL,LOW(P1)
000231 9631                          adiw    Z,1 ; looks past head
000232 9100 0181                     lds     r16,P1
000234 9120 01c1                     lds     r18,P1_LEN
000236 952a                          dec     r18 ; compensates for head
000237 940e 0285                     call    hit_loop
000239 1132                          cpse    r19,ZERO
00023a c029                          rjmp    p2_win
                                    ; p2 head and p2 body 
00023b e0f1                          ldi     ZH,HIGH(P2)
00023c ece3                          ldi     ZL,LOW(P2)
00023d 9631                          adiw    Z,1 ; looks past head
00023e 9100 01c3                     lds     r16,P2
000240 9120 0203                     lds     r18,P2_LEN
000242 952a                          dec     r18 ; compensates for head
000243 940e 0285                     call    hit_loop
000245 1132                          cpse    r19,ZERO
000246 c019                          rjmp    p1_win
                                    ; p1 head and p2 body 
000247 e0f1                          ldi     ZH,HIGH(P2)
000248 ece3                          ldi     ZL,LOW(P2)
000249 9100 0181                     lds     r16,P1
00024b 9120 0203                     lds     r18,P2_LEN
00024d 940e 0285                     call    hit_loop
00024f 1132                          cpse    r19,ZERO
000250 c013                          rjmp    p2_win
                                    ; p2 head and p1 body 
000251 e0f1                          ldi     ZH,HIGH(P1)
000252 e8e1                          ldi     ZL,LOW(P1)
000253 9100 01c3                     lds     r16,P2
000255 9120 01c1                     lds     r18,P1_LEN
000257 940e 0285                     call    hit_loop
000259 1132                          cpse    r19,ZERO
00025a c005                          rjmp    p1_win
                                 
                                     ; no player hit
00025b c00b                          rjmp    check_players_done
                                 tie:
00025c e003                          ldi     r16,TIED
00025d 9300 0207                     sts     STATUS,r16
00025f c007                          rjmp    check_players_done
                                 p1_win:    
000260 e001                          ldi     r16,P1_WINS
000261 9300 0207                     sts     STATUS,r16
000263 c003                          rjmp    check_players_done
                                 p2_win:
000264 e002                          ldi     r16,P2_WINS
000265 9300 0207                     sts     STATUS,r16
                                 check_players_done:
000267 9508                          ret
                                 
                                 
                                 CHECK_FRUIT_HITS:
000268 9120 0205                     lds     r18,FRUIT
                                     ; P1 and fruit
00026a 9100 0181                     lds     r16,P1
00026c 1720                          cp      r18,r16
00026d f029                          breq    p1_eats
                                     ; P2 and fruit
00026e 9100 01c3                     lds     r16,P2
000270 1720                          cp      r18,r16
000271 f049                          breq    p2_eats
000272 c011                          rjmp    check_fruit_done
                                 p1_eats:
                                     ; increase length if not max
000273 9100 01c1                     lds     r16,P1_LEN
000275 e410                          ldi     r17,MAX_LEN
000276 1301                          cpse    r16,r17
000277 9503                          inc     r16
000278 9300 01c1                     sts     P1_LEN,r16
00027a c007                          rjmp    new_fruit
                                 p2_eats:
                                     ; increase length if not max
00027b 9100 0203                     lds     r16,P2_LEN
00027d e410                          ldi     r17,MAX_LEN
00027e 1301                          cpse    r16,r17
00027f 9503                          inc     r16
000280 9300 0203                     sts     P2_LEN,r16
                                 new_fruit:
000282 940e 007a                     call    PLACE_FRUIT
                                 check_fruit_done:
000284 9508                          ret
                                 
                                 
                                 hit_loop:
                                 ; Requires Z at body to loop through 
                                 ; and its length in r18 as well as 
                                 ; the head to check in r16.
                                 ; Sets in r19 if hit, else 0;
000285 9111                          ld      r17,Z+ ; move through body
000286 1701                          cp      r16,r17 ; check if hit
000287 f019                          breq    hit_found
000288 952a                          dec     r18 ; count down
000289 f7d9                          brne    hit_loop
00028a c002                          rjmp    no_hit_found
                                 hit_found:
00028b ef3f                          ser     r19
00028c c001                          rjmp    hit_loop_done
                                 no_hit_found:
00028d 2733                          clr     r19
                                 hit_loop_done:
00028e 9508                          ret
                                 ;.include "ljud.inc"
                                 
                                 PROG_START:
00028f e008                          ldi     r16,HIGH(RAMEND)
000290 bf0e                          out     SPH,r16
000291 ef0f                          ldi     r16,LOW(RAMEND)
000292 bf0d                          out     SPL,r16
000293 2422                          clr     ZERO
                                 
                                     ; sets hardware, flags, clears memory
000294 940e 0091                     call    INIT
                                     ; sets start conditions, game mode
000296 940e 0022                     call    SETUP
                                 PLAY:
000298 940e 00bc                     call    ERASE_VMEM
00029a 940e 00c7                     call    UPDATE_VMEM
                                 
00029c 940e 0224                     call    CHECK_HITS
                                 
00029e 940e 0061                     call    DELAY
0002a0 940e 014e                     call    JOYSTICK
0002a2 940e 0061                     call    DELAY    
0002a4 940e 014e                     call    JOYSTICK
0002a6 940e 0061                     call    DELAY
0002a8 940e 014e                     call    JOYSTICK
0002aa 940e 0061                     call    DELAY
                                 
0002ac 940e 0190                     call    MOVE
                                 
0002ae 9100 0207                     lds     r16,STATUS
0002b0 1502                          cp      r16,ZERO
0002b1 f409                          brne    GAME_OVER
0002b2 cfe5                          rjmp    PLAY
                                 
                                 GAME_OVER:
0002b3 e10e                          ldi     r16,30
0002b4 940e 006b                     call    WAIT
0002b6 9100 0207                     lds     r16,STATUS
0002b8 3003                          cpi     r16,TIED
0002b9 f021                          breq    tied_screen
0002ba 3001                          cpi     r16,P1_WINS
0002bb f039                          breq    p1_win_screen
0002bc 3002                          cpi     r16,P2_WINS
0002bd f051                          breq    p2_win_screen
                                 tied_screen:
0002be 940e 00bc                     call    ERASE_VMEM
0002c0 e0f4                          ldi     ZH,HIGH(TIE_TAB*2)
0002c1 e2ee                          ldi     ZL,LOW(TIE_TAB*2)
0002c2 c009                          rjmp    win_prep_done
                                 p1_win_screen:
0002c3 940e 00bc                     call    ERASE_VMEM
0002c5 e0f3                          ldi     ZH,HIGH(RED_WIN_TAB*2)
0002c6 eee0                          ldi     ZL,LOW(RED_WIN_TAB*2)
0002c7 c004                          rjmp    win_prep_done
                                 p2_win_screen:
0002c8 940e 00bc                     call    ERASE_VMEM
0002ca e0f4                          ldi     ZH,HIGH(BLUE_WIN_TAB*2)
0002cb e0e4                          ldi     ZL,LOW(BLUE_WIN_TAB*2)
                                 win_prep_done:
0002cc 940e 01dc                     call    UPDATE_WIN_VMEM
0002ce e604                          ldi     r16,100
0002cf 940e 006b                     call    WAIT
0002d1 940c 028f                     jmp     PROG_START


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :  10 z  :  29 r0 :   0 r1 :   0 r2 :  22 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 181 r17:  53 r18:  40 r19:  29 r20:   4 
r21:   0 r22:   0 r23:   0 r24:   0 r25:   0 r26:   0 r27:   0 r28:   6 
r29:   6 r30:  36 r31:  36 
Registers used: 12 out of 35 (34.3%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   6 add   :   6 adiw  :   2 and   :   0 
andi  :   4 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  20 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   4 brlt  :   0 brmi  :   0 
brne  :  16 brpl  :   0 brsh  :   2 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  51 cbi   :   1 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   5 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   2 cp    :   7 cpc   :   0 
cpi   :  20 cpse  :   7 dec   :  20 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   4 inc   :   7 jmp   :   3 
ld    :   7 ldd   :   9 ldi   :  92 lds   :  37 lpm   :   1 lsl   :   4 
lsr   :   1 mov   :   4 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   8 ori   :   1 out   :   9 pop   :  24 
push  :  24 rcall :   0 ret   :  25 reti  :   1 rjmp  :  25 rol   :   0 
ror   :   0 sbc   :   1 sbci  :   0 sbi   :   1 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   6 sbrc  :   5 sbrs  :   1 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   1 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   6 std   :  14 sts   :  25 
sub   :   1 subi  :   2 swap  :   2 tst   :   0 wdr   :   0 
Instructions used: 48 out of 113 (42.5%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0005a6   1282    104   1386   32768   4.2%
[.dseg] 0x000100 0x000208      0    264    264    2048  12.9%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
