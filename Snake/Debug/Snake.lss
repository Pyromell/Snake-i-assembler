
AVRASM ver. 2.2.7  X:\microdataprojekt\projekt\Snake\main.asm Wed Mar 08 12:03:20 2023

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m328Pdef.inc'
X:\microdataprojekt\projekt\Snake\main.asm(29): Including file 'X:\microdataprojekt\projekt\Snake\help.inc'
X:\microdataprojekt\projekt\Snake\main.asm(30): Including file 'X:\microdataprojekt\projekt\Snake\init.inc'
X:\microdataprojekt\projekt\Snake\main.asm(31): Including file 'X:\microdataprojekt\projekt\Snake\vmem.inc'
X:\microdataprojekt\projekt\Snake\main.asm(32): Including file 'X:\microdataprojekt\projekt\Snake\mux.inc'
X:\microdataprojekt\projekt\Snake\main.asm(33): Including file 'X:\microdataprojekt\projekt\Snake\joystick.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m328Pdef.inc'
X:\microdataprojekt\projekt\Snake\main.asm(29): Including file 'X:\microdataprojekt\projekt\Snake\help.inc'
X:\microdataprojekt\projekt\Snake\main.asm(30): Including file 'X:\microdataprojekt\projekt\Snake\init.inc'
X:\microdataprojekt\projekt\Snake\main.asm(31): Including file 'X:\microdataprojekt\projekt\Snake\vmem.inc'
X:\microdataprojekt\projekt\Snake\main.asm(32): Including file 'X:\microdataprojekt\projekt\Snake\mux.inc'
X:\microdataprojekt\projekt\Snake\main.asm(33): Including file 'X:\microdataprojekt\projekt\Snake\joystick.inc'
                                 
                                 ; SPI pins
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 .equ    MOSI = PB3
                                 .equ    SCK  = PB5
                                 .equ    SS   = PB2
                                 ; LED colors
                                 .equ    B = 0
                                 .equ    G = 1
                                 .equ    R = 2
                                 .equ	A = 3
                                 ; Game constants
                                 .equ	P1_COLOR = R
                                 .equ	P2_COLOR = B
                                 .equ	FRUIT_COLOR = G
                                 .equ	MAX_LEN  = 64
                                 ; Controls
                                 .equ    J1X = 3
                                 .equ    J1Y = 0
                                 .equ    J2X = 1
                                 .equ    J2Y = 2
                                 ; Registers
                                 .def    ZERO = r2
                                 
                                 .org 0x0000
000000 940c 01ea                     jmp     PROG_START
                                 
                                 .org OVF0ADDR
000020 940c 011d                     jmp     MULTIPLEX
                                 
                                 .include "help.inc"
                                 
                                 ; Converts coordinate in r16
                                 ; to byte for DAMatrix in r19
                                 
000022 e830                          ldi     r19,0b1000_0000
000023 3000                          cpi     r16,0
000024 f019                          breq    c2b_done
                                 c2b_loop:    
000025 9536                          lsr     r19
000026 950a                          dec     r16    
000027 f7e9                          brne    c2b_loop
                                 c2b_done:
000028 9508                          ret
                                 
                                 
                                 SPI_TX:
                                 ; Sends argument register on stack,
                                 ; waiting until send is complete
                                 ; by checking flag in SPSR
                                 
000029 93ff                          push    ZH
00002a 93ef                          push    ZL
00002b 930f                          push    r16
                                 
00002c b7fe                          in      ZH,SPH
00002d b7ed                          in      ZL,SPL
00002e 8106                          ldd     r16,Z+6
00002f bd0e                          out     SPDR,r16
                                 
                                 spi_tx_wait:
000030 b50d                          in      r16,SPSR
000031 ff07                          sbrs    r16,SPIF
000032 cffd                          rjmp    spi_tx_wait
                                 
000033 910f                          pop     r16
000034 91ef                          pop     ZL
000035 91ff                          pop     ZH
000036 9508                          ret
                                 
                                 
                                 DELAY:
000037 e100                          ldi     r16,16
                                 delay0:
000038 ef1f                          ldi     r17,$ff
                                 delay1:
000039 ef2f                          ldi     r18,$ff
                                 delay2:
00003a 952a                          dec     r18
00003b f7f1                          brne    delay2
00003c 951a                          dec     r17
00003d f7d9                          brne    delay1
00003e 950a                          dec     r16
00003f f7c1                          brne    delay0
000040 9508                          ret
                                 
                                 
                                 SEP_XY:
                                 ; In:  r16 = 0bxxxx_yyyy.
                                 ; Out: r16 = 0b0000_xxxx,
                                 ;      r17 = 0b0000_yyyy.
000041 2f10                          mov     r17,r16
000042 9502                          swap    r16
000043 700f                          andi    r16,0b0000_1111 ; x
000044 701f                          andi    r17,0b0000_1111 ; y
000045 9508                          ret
                                 
                                 
                                 JOIN_XY:
                                 ; In:  r16 = 0b0000_xxxx.
                                 ;      r17 = 0b0000_yyyy,
                                 ; Out: r16 = 0bxxxx_yyyy.
000046 9502                          swap    r16
000047 2b01                          or      r16,r17
000048 9508                          ret
                                 
                                 
                                 RANDOM:
                                 RE_TRY:    
000049 9100 0204                     lds     r16,SEED
00004b e0f1                          ldi     ZH,HIGH(P1)
00004c e8e1                          ldi     ZL,LOW(P1)
00004d 9110 01c1                     lds     r17,P1_LEN
                                     
                                     RANDOM_LOOP1:
00004f 9121                          ld      r18,Z+
000050 1720                          cp      r18,r16
000051 f3b9                          breq    RE_TRY   
000052 951a                          dec     r17
000053 f7d9                          brne    RANDOM_LOOP1
                                 
000054 e0f1                          ldi     ZH,HIGH(P2)
000055 ece2                          ldi     ZL,LOW(P2)
000056 9110 0202                     lds     r17,P2_LEN
                                 
                                     RANDOM_LOOP2:
000058 9121                          ld      r18,Z+
000059 1720                          cp      r18,r16
00005a f371                          breq    RE_TRY   
00005b 951a                          dec     r17
00005c f7d9                          brne    RANDOM_LOOP2
                                 
00005d 9300 0203                     sts     FRUIT,r16
00005f 9508                          ret
                                 
                                 
                                 
                                 HIT:
                                     
000060 e0f1                          ldi     ZH,HIGH(P1)
000061 e8e1                          ldi     ZL,LOW(P1)
                                 
000062 e0d1                          ldi     YH,HIGH(P2)
000063 ecc2                          ldi     YL,LOW(P2)
                                    
000064 8100                          ld      r16,Z
000065 8118                          ld      r17,Y
                                 
000066 1701                          cp      r16,r17
000067 f079                          breq    TIE
000068 9120 0202                     lds     r18,P2_LEN
                                 
                                 COLIDE_P2_LOOP:
00006a 9119                          ld      r17,Y+
00006b 1701                          cp     r16,r17  
00006c f051                          breq    P2_WIN
                                 
00006d 952a                          dec     r18
00006e f7d9                          brne    COLIDE_P2_LOOP
                                 
00006f e0d1                          ldi     YH,HIGH(P2)
000070 ecc2                          ldi     YL,LOW(P2)
                                     // RESETING Y TO POINT AT HEAD
                                 
                                 COLIDE_P1_LOOP:
000071 9101                          ld      r16,Z+
000072 1701                          cp     r16,r17    
000073 f019                          breq    P1_WIN
000074 952a                          dec     r18
000075 f7d9                          brne    COLIDE_P1_LOOP
                                    
000076 c000                          rjmp    SNAKE_HIT_DONE
                                 
                                 // Exercise for the reader :D
                                 TIE:
                                 P1_WIN:
                                 P2_WIN:        
                                 
                                 SNAKE_HIT_DONE:
                                 
000077 e0f1                          ldi     ZH,HIGH(P1)
000078 e8e1                          ldi     ZL,LOW(P1)
                                 
000079 8100                          ld      r16,Z
00007a 8118                          ld      r17,Y
00007b 9120 0203                     lds     r18,FRUIT
                                     
00007d 1720                          cp      r18,r16
00007e f439                          brne    P1_NO_FRUIT
                                         
00007f 9100 01c1                     lds     r16,P1_LEN
000081 9503                          inc     r16
000082 9300 01c1                     sts     P1_LEN,r16  
000084 940e 0049                     call    RANDOM
                                 P1_NO_FRUIT:
                                 
000086 1721                          cp      r18,r17
000087 f439                          brne    P2_NO_FRUIT
                                 
000088 9110 01c1                     lds     r17,P1_LEN
00008a 9513                          inc     r17
00008b 9310 0202                     sts     P2_LEN,r17
00008d 940e 0049                     call    RANDOM
                                 P2_NO_FRUIT:
                                 
00008f 9508                          ret
                                 
                                 
                                 // this need to be done differently in joystick
                                 AUTO_RUN:
                                     // Attempt to make the snake auto move
000090 e0f1                          ldi     ZH,HIGH(P1)
000091 e8e1                          ldi     ZL,LOW(P1)
                                 
000092 8100                          ld      r16,Z
000093 940e 0041                     call    SEP_XY
000095 2f20                          mov     r18,r16  // Head X Pos
000096 2f31                          mov     r19,r17  // Head Y Pos
                                 
000097 8101                          ldd     r16,Z+1 
000098 940e 0041                     call    SEP_XY   
                                     // r16 1st tail X pos
                                     // r17 1st tail Y pos
00009a 1702                          cp      r16,r18
00009b f451                          brne    X_USED
                                     
00009c 8102                          ldd     r16,Z+2
00009d 9502                          swap    r16
00009e 700f                          andi    r16,0b0000_1111
                                 
00009f 1720                          cp      r18,r16
0000a0 f029                          breq    X_USED  
                                 
0000a1 1720                          cp      r18,r16
0000a2 f410                          brsh    INC_X_POS
                                 
0000a3 952a                          dec     r18    
0000a4 c001                          rjmp    X_USED     
                                 INC_X_POS:  
0000a5 9523                          inc     r18
                                 X_USED:
0000a6 8102                          ldd     r16,Z+2
0000a7 700f                          andi    r16,0b0000_1111
                                     
0000a8 1730                          cp      r19,r16
0000a9 f029                          breq    DONE_AUTO    
                                 
0000aa 1730                          cp      r19,r16
0000ab f410                          brsh    INC_Y_POS
0000ac 953a                          dec     r19
0000ad c001                          rjmp    DONE_AUTO
                                 INC_Y_POS:
0000ae 9533                          inc     r19
                                 DONE_AUTO:
0000af 2f02                          mov     r16,r18
0000b0 2f13                          mov     r17,r19
0000b1 940e 0046                     call    JOIN_XY
0000b3 940e 01c6                     call    XLIM
0000b5 8300                          st      Z,r16
                                 .include "init.inc"
0000b6 9508                      
                                 ; Entry point for call from main
                                 spi_init:
                                     ; Set MOSI and SCK output, all others input
0000b7 e20c                          ldi     r16,( 1 << MOSI | 1 << SCK | 1 << SS )
0000b8 b904                          out     DDRB,r16
                                 
                                     ; Enable SPI, Master, set clock rate fck/16
                                     ldi     r16,( 1 << SPE  | 1 << MSTR |\
0000b9 e500                                        0 << SPR0 | 0 << SPR1 )
0000ba bd0c                          out     SPCR,r16
                                 
0000bb e010                          ldi     r17,( 0 << SPI2X )
0000bc bd1d                          out     SPSR,r17
                                 
                                 adc_init:
                                     ; ADC Control and Status Register A:
                                     ; ADEN, ADSC, ADATE, ADIF, ADIE, ADPS2..0
                                     ; Prescaler 2..0: Set to 1/128 => 125 kHz
0000bd e807                          ldi     r16,0b1000_0111
0000be 9300 007a                     sts     ADCSRA,r16
                                 
                                     ; ADC Multiplexer Selection Register:
                                     ; REFS1..0, ADLAR, --, MUX3..0
                                     ; Ref set to AVCC (01)
                                     ; Channel Selection 3..0: 0000 = ADC0
0000c0 e600                          ldi     r16,0b0110_0000
0000c1 9300 007c                     sts     ADMUX,r16
                                 
                                 interrupt_init:
                                     ldi     r16,( 0 << COM0A1 | 0 << COM0A0 |\
0000c3 e000                                        0 << WGM01  | 0 << WGM00  )
0000c4 bd04                          out     TCCR0A,r16
                                 
                                     ldi     r16,( 0 << WGM02 | 0 << CS02 |\
0000c5 e003                                        1 << CS01  | 1 << CS00 )
0000c6 bd05                          out     TCCR0B,r16
                                     
0000c7 e001                          ldi     r16,( 1 << TOIE0 )
0000c8 9300 006e                     sts     TIMSK0,r16
                                 
                                 data_init:
0000ca e8e1                          ldi     ZL,LOW(P1)
0000cb e0f1                          ldi     ZH,HIGH(P1)
0000cc 8220                          st      Z,ZERO
                                 
0000cd ece2                          ldi     ZL,LOW(P2)
0000ce e0f1                          ldi     ZH,HIGH(P2)
0000cf 8220                          st      Z,ZERO
                                 
0000d0 e0e3                          ldi     ZL,LOW(FRUIT)
0000d1 e0f2                          ldi     ZH,HIGH(FRUIT)
0000d2 8220                          st      Z,ZERO
                                 
0000d3 9220 0180                     sts     LINE,ZERO
                                 
0000d5 9508                      ret ; from INIT
                                 .include "vmem.inc"
                                 
0000d6 93ff                          push    ZH
0000d7 93ef                          push    ZL
0000d8 e0f1                          ldi     ZH,HIGH(VMEM)
0000d9 e0e0                          ldi     ZL,LOW(VMEM)
0000da e800                          ldi     r16,128
                                 clear_byte:
0000db 9221                          st      Z+,ZERO
0000dc 950a                          dec     r16
0000dd f7e9                          brne    clear_byte
0000de 91ef                          pop     ZL
0000df 91ff                          pop     ZH
0000e0 9508                          ret
                                 
                                 
                                 UPDATE_VMEM:
0000e1 93ff                          push    ZH
0000e2 93ef                          push    ZL
                                 
                                 update_p1:
0000e3 e0f1                          ldi     ZH,HIGH(P1)
0000e4 e8e1                          ldi     ZL,LOW(P1)
0000e5 9140 01c1                     lds     r20,P1_LEN
                                 update_p1_loop:
0000e7 9101                          ld      r16,Z+
                                     ; sets Y to correct line in VMEM
                                     ; returns DAMatrix byte in r19
0000e8 940e 0106                     call    POINT_AT_LINE
                                     ; adds player color at coord to that byte
0000ea 810a                          ldd     r16,Y+P1_COLOR
0000eb 2b30                          or      r19,r16
0000ec 833a                          std     Y+P1_COLOR,r19
0000ed 954a                          dec     r20
0000ee f7c1                          brne    update_p1_loop
                                 
                                 update_p2:  ; same as p1
0000ef e0f1                          ldi     ZH,HIGH(P2)
0000f0 ece2                          ldi     ZL,LOW(P2)
0000f1 9140 0202                     lds     r20,P2_LEN
                                 update_p2_loop:
0000f3 9101                          ld      r16,Z+
0000f4 940e 0106                     call    POINT_AT_LINE
0000f6 8108                          ldd     r16,Y+P2_COLOR
0000f7 2b30                          or      r19,r16
0000f8 8338                          std     Y+P2_COLOR,r19
0000f9 954a                          dec     r20
0000fa f7c1                          brne    update_p2_loop
                                 
                                 update_fruit:
0000fb e0f2                          ldi     ZH,HIGH(FRUIT)
0000fc e0e3                          ldi     ZL,LOW(FRUIT)
0000fd 8100                          ld      r16,Z
0000fe 940e 0106                     call    POINT_AT_LINE
000100 8109                          ldd     r16,Y+FRUIT_COLOR
000101 2b30                          or      r19,r16
000102 8339                          std     Y+FRUIT_COLOR,r19
                                 
                                 update_done:
000103 91ef                          pop     ZL
000104 91ff                          pop     ZH
000105 9508                          ret
                                 
                                 
                                 POINT_AT_LINE:
                                 ; Sets Y to line with r16=x,y in VMEM.
                                 ; Returns byte to write in r19
000106 e0d1                          ldi     YH,HIGH(VMEM)
000107 e0c0                          ldi     YL,LOW(VMEM)
000108 940e 0041                     call    SEP_XY ; x,y = r16,r17
                                     ; determine if upper display
00010a 3018                          cpi     r17,8
00010b f020                          brlo    upper_lower_chosen
                                     ; move Y to upper display
00010c 5018                          subi    r17,8
00010d e420                          ldi     r18,64
00010e 0fc2                          add     YL,r18
00010f 1dd2                          adc     YH,ZERO
                                 upper_lower_chosen:
                                     ; Y += y * 4 to point at line
000110 0f11                          lsl     r17
000111 0f11                          lsl     r17
000112 0fc1                          add     YL,r17
000113 1dd2                          adc     YH,ZERO
                                     ; determine if right display
000114 3008                          cpi     r16,8
000115 f020                          brlo    left_right_chosen
                                     ; move Y to right display
000116 5008                          subi    r16,8
000117 e220                          ldi     r18,32
000118 0fc2                          add     YL,r18
000119 1dd2                          adc     YH,ZERO
                                 left_right_chosen:
                                     ; convert x to byte for DAMatrix
00011a 940e 0022                     call    COORD2BYTE ; in r16, out r19
                                 .include "mux.inc"
00011c 9508                      
                                 ; Multiplexes DAMatrix.
                                 ; Draws LINE on each display 3..0.
00011d 93ff                          push    ZH
00011e 93ef                          push    ZL
00011f 930f                          push    r16
000120 931f                          push    r17
000121 932f                          push    r18
000122 933f                          push    r19
                                 
000123 b70f                          in      r16,SREG
000124 930f                          push    r16 
                                 
000125 e0e0                          ldi     ZL,LOW(VMEM)
000126 e0f1                          ldi     ZH,HIGH(VMEM)
                                 
                                     ; sets Z to start of display 3
000127 e610                          ldi     r17,96
000128 0fe1                          add     ZL,r17
000129 1df2                          adc     ZH,ZERO
                                 
                                     ; resets LINE to 0 if 8
00012a 9100 0180                     lds     r16,LINE
00012c 7007                          andi    r16,7
00012d 2f10                          mov     r17,r16
                                 
                                     ; LINE * 4 to get row in VMEM,
                                     ; sets Z to that row
00012e 0f11                          lsl     r17
00012f 0f11                          lsl     r17
000130 0fe1                          add     ZL,r17
000131 1df2                          adc     ZH,ZERO
                                 
000132 940e 0022                     call    COORD2BYTE ; in r16, out r19
                                 
000134 982a                          cbi     PORTB,SS ; pulls latch
                                 
                                     ; loops through displays
000135 e024                          ldi     r18,4
                                 disp_loop:
                                     ; transmits blue
000136 8100                          ldd     r16,Z+B 
000137 930f                          push    r16
000138 940e 0029                     call    SPI_TX
00013a 910f                          pop     r16
                                 
                                     ; transmits green
00013b 8101                          ldd     r16,Z+G
00013c 930f                          push    r16
00013d 940e 0029                     call    SPI_TX
00013f 910f                          pop     r16
                                 
                                     ; transmits red
000140 8102                          ldd     r16,Z+R
000141 930f                          push    r16
000142 940e 0029                     call    SPI_TX
000144 910f                          pop     r16
                                     
                                     ; transmits anode
000145 9530                          com     r19 ; invert bytes for DAMatrix
000146 933f                          push    r19
000147 940e 0029                     call    SPI_TX
000149 913f                          pop     r19
00014a 9530                          com     r19
                                 
                                     ; moves Z to next display
00014b e210                          ldi     r17,32
00014c 1be1                          sub     ZL,r17
00014d 09f2                          sbc     ZH,ZERO
                                 
00014e 952a                          dec     r18
00014f f731                          brne    disp_loop
                                 
000150 9a2a                          sbi     PORTB,SS ; pulls latch
                                 
                                     ; incs LINE before next INT
000151 9100 0180                     lds     r16,LINE
000153 9503                          inc     r16
000154 9300 0180                     sts     LINE,r16
                                 
                                     ; Upcount random
000156 9100 0204                     lds     r16,SEED
000158 9503                          inc     r16
000159 9300 0204                     sts     SEED,r16
                                 
00015b 910f                          pop     r16
00015c bf0f                          out     SREG,r16
                                 
00015d 913f                          pop     r19
00015e 912f                          pop     r18
00015f 911f                          pop     r17
000160 910f                          pop     r16
000161 91ef                          pop     ZL
000162 91ff                          pop     ZH
                                 .include "joystick.inc"
000163 9518                      
                                 ; Reads from pin specified by MUX3..0 in r18
                                 ; Returns ADCH in r19
000164 9100 007a                     lds     r16,ADCSRA
000166 6400                          ori     r16,0b0100_0000 ; set ADSC
000167 9300 007a                     sts     ADCSRA,r16
000169 e600                          ldi     r16,0b0110_0000 ; load default ADMUX
00016a 2b02                          or      r16,r18 ; set MUXn = PCn from r18 = n
00016b 9300 007c                     sts     ADMUX,r16
                                 adc_not_done: ; wait till conversion done
00016d 9100 007a                     lds     r16,ADCSRA
00016f fd06                          sbrc    r16,ADSC
000170 cffc                          rjmp    adc_not_done
                                 adc_done:
000171 9130 0079                     lds     r19,ADCH ; read 8 MSB
000173 9508                          ret
                                 
                                 
                                 JOYSTICK_1:
                                 ; Performs ADC conversion and
                                 ; updates head coords in SRAM
                                     ; x-direction
000174 e023                          ldi     r18,J1X
000175 940e 0164                     call    READ_JOY ; returns ADCH in r19
000177 9100 0181                     lds     r16,P1
000179 940e 0041                     call    SEP_XY
00017b 3c30                          cpi     r19,0b1100_0000 ; checks right
00017c f010                          brlo    not_right
00017d 9503                          inc     r16
00017e c003                          rjmp    not_left
                                 not_right:
00017f 3430                          cpi     r19,0b0100_0000 ; checks left
000180 f408                          brsh    not_left
000181 950a                          dec     r16
                                 not_left:
000182 940e 01c6                     call    XLIM
000184 940e 0046                     call    JOIN_XY
000186 9300 0181                     sts     P1,r16
                                     ; y-direction
000188 e020                          ldi     r18,J1Y
000189 940e 0164                     call    READ_JOY  ; returns ADCH in r19
00018b 9100 0181                     lds     r16,P1
00018d 940e 0041                     call    SEP_XY
00018f 3c30                          cpi     r19,0b1100_0000 ; checks up
000190 f010                          brlo    not_up
000191 9513                          inc     r17
000192 c003                          rjmp    all_done
                                 not_up:
000193 3430                          cpi     r19,0b0100_0000 ; checks down
000194 f408                          brsh    all_done
000195 951a                          dec     r17
                                 
                                 all_done:
000196 940e 01d0                     call    YLIM
000198 940e 0046                     call    JOIN_XY
00019a 9300 0181                     sts     P1,r16
                                    
00019c 9508                          ret
                                 
                                 
                                 JOYSTICK_2:
                                 ; Performs ADC conversion and
                                 ; updates head coords in SRAM
                                     ; x-direction
00019d e021                          ldi     r18,J2X
00019e 940e 0164                     call    READ_JOY ; returns ADCH in r19
0001a0 9100 01c2                     lds     r16,P2
0001a2 940e 0041                     call    SEP_XY
0001a4 3c30                          cpi     r19,0b1100_0000 ; checks right
0001a5 f010                          brlo    not_right2
0001a6 9503                          inc     r16
0001a7 c003                          rjmp    not_left2
                                 not_right2:
0001a8 3430                          cpi     r19,0b0100_0000 ; checks left
0001a9 f408                          brsh    not_left2
0001aa 950a                          dec     r16
                                 not_left2:
0001ab 940e 01c6                     call    XLIM
0001ad 940e 0046                     call    JOIN_XY
0001af 9300 01c2                     sts     P2,r16
                                     ; y-direction
0001b1 e022                          ldi     r18,J2Y
0001b2 940e 0164                     call    READ_JOY  ; returns ADCH in r19
0001b4 9100 01c2                     lds     r16,P2
0001b6 940e 0041                     call    SEP_XY
0001b8 3c30                          cpi     r19,0b1100_0000 ; checks up
0001b9 f010                          brlo    not_up2
0001ba 9513                          inc     r17
0001bb c003                          rjmp    all_done2
                                 not_up2:
0001bc 3430                          cpi     r19,0b0100_0000 ; checks down
0001bd f408                          brsh    all_done2
0001be 951a                          dec     r17
                                 all_done2:
0001bf 940e 01d0                     call    YLIM
0001c1 940e 0046                     call    JOIN_XY
0001c3 9300 01c2                     sts     P2,r16
0001c5 9508                          ret
                                 
                                 
                                 XLIM:
                                 ; Takes x,y = r16,r17 and
                                 ; moves them to other side of
                                 ; screen if outside.
0001c6 3f0f                          cpi     r16,255
0001c7 f019                          breq    x_under
0001c8 3100                          cpi     r16,16
0001c9 f019                          breq    x_over
0001ca c004                          rjmp    xlim_done
                                 x_under:
0001cb e00f                          ldi     r16,15
0001cc c002                          rjmp    xlim_done
                                 x_over:
0001cd e000                          ldi     r16,0
0001ce c000                          rjmp    xlim_done
                                 xlim_done:
0001cf 9508                          ret
                                 
                                 YLIM:
0001d0 3f1f                          cpi     r17,255
0001d1 f019                          breq    y_under
0001d2 3110                          cpi     r17,16
0001d3 f019                          breq    y_over
0001d4 c004                          rjmp    ylim_done
                                 y_under:
0001d5 e01f                          ldi     r17,15
0001d6 c002                          rjmp    ylim_done
                                 y_over:
0001d7 e010                          ldi     r17,0
0001d8 c000                          rjmp    ylim_done
                                 ylim_done:
0001d9 9508                          ret
                                 
                                  
                                 MOVE_P1_BODY:
0001da 930f                          push    r16
0001db 931f                          push    r17
                                 
0001dc e0f1                          ldi     ZH,HIGH(P1)
0001dd e8e1                          ldi     ZL,LOW(P1)
0001de 9100 01c1                     lds     r16,P1_LEN
                                     // Head location starts at 0 instead of 1
0001e0 950a                          dec     r16 
                                     // Start looking at the back of the snake 
0001e1 0fe0                          add     ZL,r16
0001e2 1df2                          adc     ZH,ZERO
                                 move_p1_loop:
                                     // Example: if size = 3 then takes
                                     // from 2nd and put into 3rd
0001e3 9112                          ld      r17,-Z
0001e4 8311                          std     Z+1,r17
0001e5 950a                          dec     r16
0001e6 f7e1                          brne    move_p1_loop
                                     // Now Head is the same value as
                                     // first part of tail
                                     // After this call we want to update
                                     // head with new cord from Joystick
0001e7 911f                          pop        r17
0001e8 910f                          pop        r16
0001e9 9508                          ret
                                 
                                 
                                 /*
                                 MOVE_P1_BODY:
                                     ldi     ZH,HIGH(P1)
                                     ldi     ZL,LOW(P1)
                                     ld      r16,Z+ ; stores head
                                     lds     r20,P1_LEN
                                 move_p1_loop:
                                     ld      r17,Z ; store curr to tmp
                                     st      Z+,r16 ; write prev to curr
                                     mov     r16,r17 ; store tmp as new prev
                                     dec     r20
                                     brne    move_p1_loop
                                     ret
                                 */
                                 
                                 .dseg
000100                               VMEM:   .byte 128
000180                               LINE:   .byte 1
                                 
000181                               P1:     .byte MAX_LEN ; $xy
0001c1                               P1_LEN: .byte 1
                                 
0001c2                               P2:     .byte MAX_LEN ; $xy
000202                               P2_LEN: .byte 1
                                 
000203                               FRUIT:  .byte 1	  ; $xy
                                 
000204                               SEED:   .byte 1 ; upconunt
                                 .cseg
                                 
                                 
                                 PROG_START:
0001ea e008                          ldi     r16,HIGH(RAMEND)
0001eb bf0e                          out     SPH,r16
0001ec ef0f                          ldi     r16,LOW(RAMEND)
0001ed bf0d                          out     SPL,r16
0001ee 2422                          clr     ZERO
0001ef 940e 00b7                     call    INIT
                                 
                                 
                                 SETUP:
                                 ; Initiates player positions
                                 
                                 
0001f1 e8e1                          ldi		ZL,LOW(P1)
0001f2 e0f1                      	ldi		ZH,HIGH(P1)
                                 
0001f3 ed07                      	ldi		r16,0b1101_0111  // head with x = 13, y = 7
0001f4 8300                      	st		Z,r16		
0001f5 ee07                      	ldi		r16,0b1110_0111  // tail with x = 14, y = 7
0001f6 8301                      	std		Z+1,r16
0001f7 ef07                      	ldi		r16,0b1111_0111  // tail with x = 15, y = 7
0001f8 8302                      	std		Z+2,r16
0001f9 e003                      	ldi		r16,3
0001fa 9300 01c1                 	sts		P1_LEN,r16		 // store lenght of the snake
                                 
0001fc ece2                      	ldi		ZL,LOW(P2)
0001fd e0f1                      	ldi		ZH,HIGH(P2)
                                 
0001fe e208                      	ldi		r16,0b0010_1000  // head with x = 2, y = 8
0001ff 8300                      	st		Z,r16		
000200 e108                      	ldi		r16,0b0001_1000  // tail with x = 1, y = 8
000201 8301                      	std		Z+1,r16
000202 e008                      	ldi		r16,0b0000_1000  // tail with x = 0, y = 8
000203 8302                      	std		Z+2,r16
000204 e003                      	ldi		r16,3
000205 9300 0202                 	sts		P2_LEN,r16		 // store lenght of the snake
                                 
                                 
                                 /*
                                     ldi     r16,$07
                                     sts     P1,r16
                                 
                                     ldi     r16,$f7
                                     sts     P2,r16
                                 */
000207 e707                          ldi     r16,$77
000208 9300 0203                     sts     FRUIT,r16
                                    
00020a 940e 00d6                     call    ERASE_VMEM
00020c 940e 00e1                     call    UPDATE_VMEM
                                 
00020e 9478                          sei ; interrupt enabled
00020f 940e 0049                     call    RANDOM
                                 
                                 PLAY:
000211 940e 0174                     call    JOYSTICK_1
000213 940e 01da                     call    MOVE_P1_BODY
000215 940e 019d                     call    JOYSTICK_2
000217 940e 00d6                     call    ERASE_VMEM
000219 940e 00e1                     call    UPDATE_VMEM
00021b 940e 0037                     call    DELAY
00021d 940e 0060                     call    HIT
                                 
00021f cff1                          rjmp    PLAY
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   9 z  :  29 r0 :   0 r1 :   0 r2 :  13 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 147 r17:  50 r18:  32 r19:  29 r20:   4 
r21:   0 r22:   0 r23:   0 r24:   0 r25:   0 r26:   0 r27:   0 r28:   6 
r29:   6 r30:  29 r31:  29 
Registers used: 12 out of 35 (34.3%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   6 add   :   6 adiw  :   0 and   :   0 
andi  :   5 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  12 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 brlt  :   0 brmi  :   0 
brne  :  16 brpl  :   0 brsh  :   6 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  43 cbi   :   1 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   1 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   2 cp    :  12 cpc   :   0 
cpi   :  15 cpse  :   0 dec   :  20 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   4 inc   :  10 jmp   :   2 
ld    :  13 ldd   :  10 ldi   :  76 lds   :  20 lpm   :   0 lsl   :   4 
lsr   :   1 mov   :   6 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   5 ori   :   1 out   :   9 pop   :  20 
push  :  20 rcall :   0 ret   :  18 reti  :   1 rjmp  :  16 rol   :   0 
ror   :   0 sbc   :   1 sbci  :   0 sbi   :   1 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   1 sbrs  :   1 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   7 std   :   8 sts   :  18 
sub   :   1 subi  :   2 swap  :   3 tst   :   0 wdr   :   0 
Instructions used: 43 out of 113 (38.1%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000440   1028      0   1028   32768   3.1%
[.dseg] 0x000100 0x000205      0    261    261    2048  12.7%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
